package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"path"
	"path/filepath"

	lua "github.com/yuin/gopher-lua"
	luar "layeh.com/gopher-luar"
)

// ScriptSystem use Lua for scripting.
type ScriptSystem struct {
	state *lua.LState
}

// NewScriptSystem Initializes the Lua Script System
func NewScriptSystem() *ScriptSystem {
	var scriptSystem ScriptSystem
	scriptSystem.state = lua.NewState()

	return &scriptSystem
}

func (s *ScriptSystem) onCreate() {
	runParam := lua.P{
		Fn:      s.state.GetGlobal("OnCreate"),
		NRet:    0,
		Protect: true,
	}

	err := s.state.CallByParam(runParam)

	if err != nil {
		// An OnCreate function is optional
		fmt.Println("No OnCreate function found")
	}
}

// SetGlobal Just like the Lua version.
func (s *ScriptSystem) SetGlobal(name string, value interface{}) {
	s.state.SetGlobal(name, luar.New(s.state, value))
}

// DestroyScriptSystem Calls lua.LState.Close
func (s *ScriptSystem) DestroyScriptSystem() {
	s.state.Close()
}

// NewTable Creates a new table
func (s *ScriptSystem) NewTable() *lua.LTable {
	return s.state.NewTable()
}

// DoString Run the passed code string
func (s *ScriptSystem) DoString(code string) {
	s.state.DoString(code)
}

// DoFile Load the file and run its code
func (s *ScriptSystem) DoFile(fileName string, callOnCreate bool) {

	if callOnCreate {
		fn, err := s.state.LoadFile(fileName)

		if err != nil {
			log.Fatal(err)
		}

		s.state.Push(fn)
		s.state.PCall(0, lua.MultRet, nil)
		s.onCreate()

	} else {
		err := s.state.DoFile(fileName)

		if err != nil {
			log.Fatal(err)
		}
	}

}

// DoFiles Loads and processes files from the list generated by ioutil.ReadDir
func (s *ScriptSystem) DoFiles(dirName string, callOnCreate bool) {
	commandFiles, err := filepath.Glob(path.Join(dirName, "*.lua"))

	if err != nil {
		log.Fatal(err)
	}

	for _, fileName := range commandFiles {
		s.DoFile(fileName, callOnCreate)
	}
}

// LoadString load the passed code string
func (s *ScriptSystem) LoadString(code string) (*lua.LFunction, error) {
	return s.state.LoadString(code)
}

// LoadFile Load the file
func (s *ScriptSystem) LoadFile(fileName string) (*lua.LFunction, error) {
	luaFunc, err := s.state.LoadFile(fileName)

	if err != nil {
		log.Fatal(err)
	}

	return luaFunc, err
}

// LoadFiles Loads files from the list generated by ioutil.ReadDir
func (s *ScriptSystem) LoadFiles(dirName string) {
	// INFO: No point in this function at this time. Since we can't return for each file.
	files, err := ioutil.ReadDir(dirName)

	if err != nil {
		log.Fatal(err)
	}

	for _, file := range files {
		s.LoadFile(file.Name())
	}
}
