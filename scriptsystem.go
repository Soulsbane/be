package main

import (
	"io/ioutil"
	"log"
	"path"
	"path/filepath"

	lua "github.com/yuin/gopher-lua"
	luar "layeh.com/gopher-luar"
)

// ScriptSystem use Lua for scripting.
type ScriptSystem struct {
	state *lua.LState
}

// NewScriptSystem Initializes the Lua Script System
func NewScriptSystem() *ScriptSystem {
	var scriptSystem ScriptSystem
	scriptSystem.state = lua.NewState()

	return &scriptSystem
}

// SetGlobal Just like the Lua version.
func (s *ScriptSystem) SetGlobal(name string, value interface{}) {
	s.state.SetGlobal(name, luar.New(s.state, value))
}

// DestroyScriptSystem Calls lua.LState.Close
func (s *ScriptSystem) DestroyScriptSystem() {
	s.state.Close()
}

// DoString Run the passed code string
func (s *ScriptSystem) DoString(code string) {
	s.state.DoString(code)
}

// DoFile Load the file and run its code
func (s *ScriptSystem) DoFile(fileName string) {
	err := s.state.DoFile(fileName)

	if err != nil {
		log.Fatal(err)
	}
}

// DoFiles Loads and processes files from the list generated by ioutil.ReadDir
func (s *ScriptSystem) DoFiles(dirName string) {
	commandFiles, err := filepath.Glob(path.Join(dirName, "*.lua"))

	if err != nil {
		log.Fatal(err)
	}

	for _, fileName := range commandFiles {
		s.DoFile(fileName)
	}
}

// LoadString load the passed code string
func (s *ScriptSystem) LoadString(code string) (*lua.LFunction, error) {
	return s.state.LoadString(code)
}

// LoadFile Load the file
func (s *ScriptSystem) LoadFile(fileName string) (*lua.LFunction, error) {
	return s.state.LoadFile(fileName)
}

// LoadFiles Loads files from the list generated by ioutil.ReadDir
func (s *ScriptSystem) LoadFiles(dirName string) {
	// INFO: No point in this function at this time. Since we can't return for each file.
	files, err := ioutil.ReadDir(dirName)

	if err != nil {
		log.Fatal(err)
	}

	for _, file := range files {
		s.state.LoadFile(file.Name())
	}
}
